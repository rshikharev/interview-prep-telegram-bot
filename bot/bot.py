import logging
import random
import configparser
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler

from bot.utils import load_questions

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(level=logging.INFO)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
directions = ['Frontend', 'Backend', 'ML_and_DS', 'Mobile']
levels = ['junior', 'middle', 'senior']

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

def start(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ."""
    
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
        "/help ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üëá"
    )
    
    user_id = update.effective_user.id
    user_data[user_id] = {}

    keyboard = [[d] for d in directions]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    update.message.reply_text(text, reply_markup=reply_markup)

def help_command(update: Update, context: CallbackContext):
    text = (
        "‚ÑπÔ∏è –û –±–æ—Ç–µ:\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö:\n"
        "- Frontend\n"
        "- Backend\n"
        "- Machine Learning –∏ Data Science\n"
        "- Mobile-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ 20 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.\n"
        "–í –∫–æ–Ω—Ü–µ —Ç–µ—Å—Ç–∞ –±–æ—Ç –ø–æ–¥—Å–∫–∞–∂–µ—Ç —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å.\n\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∞—á–∞–ª–∞."
    )

    update.message.reply_text(text)
    
def choose_direction(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    direction = update.message.text

    if direction not in directions:
        update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞.')
        return

    user_data[user_id]['direction'] = direction

    keyboard = [[l] for l in levels]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    update.message.reply_text('–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:', reply_markup=reply_markup)

def choose_level(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    level = update.message.text.lower()

    if user_id not in user_data or 'direction' not in user_data[user_id]:
        update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ /start.')
        return

    if level not in levels:
        update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.')
        return

    user_data[user_id]['level'] = level

    try:
        questions = load_questions(user_data[user_id]['direction'], level)
    except FileNotFoundError:
        update.message.reply_text('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ –≤—ã–±–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
        return

    random.shuffle(questions)
    questions = questions[:5]

    user_data[user_id]['questions'] = questions
    user_data[user_id]['current'] = 0
    user_data[user_id]['score'] = 0
    user_data[user_id]['wrong_themes'] = set()

    send_question(update, context)

def send_question(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    questions = user_data[user_id]['questions']
    current = user_data[user_id]['current']

    if current >= len(questions):
        show_results(update, context)
        return

    q = questions[current]
    if 'answers' not in q or not q['answers']:
        context.bot.send_message(chat_id=update.effective_chat.id, text="–û—à–∏–±–∫–∞ –≤ –≤–æ–ø—Ä–æ—Å–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
        user_data[user_id]['current'] += 1
        send_question(update, context)
        return

    buttons = []
    for ans in q['answers']:
        buttons.append([InlineKeyboardButton(ans['answer_text'], callback_data=str(ans['answer_id']))])

    reply_markup = InlineKeyboardMarkup(buttons)
    context.bot.send_message(chat_id=update.effective_chat.id, text=f"–í–æ–ø—Ä–æ—Å {current+1}: {q['question']}", reply_markup=reply_markup)

def handle_answer(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    query.answer()

    selected_answer_id = int(query.data)
    current = user_data[user_id]['current']
    question = user_data[user_id]['questions'][current]

    if selected_answer_id == question['correct_answer_id']:
        user_data[user_id]['score'] += 1
    else:
        useful_info = question['useful_info']
        if isinstance(useful_info, list):
            useful_info = '\n'.join(useful_info)  # –°–∫–ª–µ–∏–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É
        user_data[user_id]['wrong_themes'].add((question['theme'], useful_info))

    user_data[user_id]['current'] += 1
    send_question(update, context)


def show_results(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    score = user_data[user_id]['score']
    total = len(user_data[user_id]['questions'])

    text = f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{total}\n\n–¢–µ–º—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:\n"
    if user_data[user_id]['wrong_themes']:
        for theme, info in user_data[user_id]['wrong_themes']:
            text += f"‚Ä¢ {theme}:\n  {info}\n"
    else:
        text += "–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ —Ç–µ–º—ã –∏–∑—É—á–µ–Ω—ã!"

    context.bot.send_message(chat_id=update.effective_chat.id, text=text)

def main():
    
    config = configparser.ConfigParser()
    config.read('config.ini')
    TOKEN = config['bot']['token']

    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(CommandHandler('help', help_command))
    dp.add_handler(MessageHandler(Filters.regex(f"^({'|'.join(directions)})$"), choose_direction))
    dp.add_handler(MessageHandler(Filters.regex(f"^({'|'.join(levels)})$"), choose_level))
    dp.add_handler(CallbackQueryHandler(handle_answer))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()